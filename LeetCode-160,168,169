class Solution {
/*
160.相交链表
给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 null 。
*/
  public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
    if(headA == null || headB == null) {
      return null;
    }
    ListNode h1 = headA;
    ListNode h2 = headB;
    while(h1 != h2) {
      h1 = h1 == null ? headB : h1.next;
      h2 = h2 == null ? headA : h2.next;
    }
    return h1;
  }
/*
168.Excel表列名称
给你一个整数 columnNumber ，返回它在 Excel 表中相对应的列名称。
*/
  public String convertToTitle(int columnNumber) {
    StringBuffer sb = new StringBuffer();
    while(columnNumber != 0) {
      columnNumber--;
      sb.append((char)(columnNumber % 26 + 'A'));
      columnNumber /= 26;
    }
    return sb.reverse().toString();
  }
/*
169.多数元素
给定一个大小为 n 的数组 nums ，返回其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。
你可以假设数组是非空的，并且给定的数组总是存在多数元素。
*/
  //以下是我想到的哈希表的解法，但是跑的分很低
  public int majorityElement(int[] nums) {
    Map<Integer, Integer> map = createMap(nums);
    Map.Entry<Integer, Integer> majorityEntry = null;
    for(Map.Entry<Integer, Integer> entry : map.entrySet()) {
      if(majorityEntry == null || majorityEntry.getValue() < entry.getValue()) {
        majorityEntry = entry;
      }
    }
    return majorityEntry.getKey();
  }
  public Map<Integer, Integer> createMap(int[] nums) {
    Map<Integer, Integer> map = new HashMap<>();
    for(int num : nums) {
      if(!map.containsKey(num)) {
        map.put(num, 1);
      } else {
        map.put(num, map.get(num) + 1);
      }
    }
    return map;
  }

  //官方随机化方法解题
  private int randRange(Random rand, int min, int max) {
        return rand.nextInt(max - min) + min;
    }

    private int countOccurences(int[] nums, int num) {
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == num) {
                count++;
            }
        }
        return count;
    }

    public int majorityElement2(int[] nums) {
        Random rand = new Random();

        int majorityCount = nums.length / 2;

        while (true) {
            int candidate = nums[randRange(rand, 0, nums.length)];
            if (countOccurences(nums, candidate) > majorityCount) {
                return candidate;
            }
        }
    }

    //官方Boyer-Moore投票算法
    public int majorityElement3(int[] nums) {
      int count = 0;
      Integer candidate = null;
      for(int num : nums) {
        if(count == 0) {
          candidate = num;
        }
        count += (num == candidate) ? 1 : -1;
      }
      return candidate;
    }
}
